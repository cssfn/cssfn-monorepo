optimize:

    #getDecl(propName: string|symbol): CssCustomName|undefined {

export const alwaysRule        = (styles:         CssStyleCollection                              ) => ({ [Symbol()] : ['&', styles] }) as CssRule; // a bit faster

export const usesCssProps      = (cssProps: Refs<CssConfigProps>): CssKnownProps => {

export const usesSuffixedProps = (cssProps: Refs<CssConfigProps>, suffix: string, remove = true): Refs<CssConfigProps> => {

export const switchOf = (first: CssCustomRef, ...nexts: [...OptionalOrBoolean<CssCustomRef>[], OptionalOrBoolean<CssCustomRef|CssCustomValue>]|[]): CssCustomRef => {

    const result: Refs<CssConfigProps> = {};
    for (const propName in cssProps) { // high cpu usage
        // excludes the entries if the `propName` is not ending with the specified `suffix`:
        if (!propName.endsWith(suffix)) continue; // exclude


            getOwnPropertyDescriptor : (_unusedObj, propName: string|symbol)                                          => this.#getPropDescRef(propName),
